import org.springframework.security.crypto.password.StandardPasswordEncoder
import org.apache.tools.ant.taskdefs.condition.Os

def vJavaLang = '1.7'

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${SPRING_BOOT_VERSION}"
        classpath "org.springframework:springloaded:1.2.1.RELEASE"
        classpath "org.springframework.boot:spring-boot-starter-security:${SPRING_BOOT_VERSION}"
    }
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'spring-boot'

repositories {
    jcenter()
}

dependencies {
    compile 'org.projectlombok:lombok:1.16.2'
    compile "org.springframework.boot:spring-boot-starter-web:${SPRING_BOOT_VERSION}"
    compile "org.springframework.boot:spring-boot-starter-thymeleaf:${SPRING_BOOT_VERSION}"
    compile "org.springframework.boot:spring-boot-starter-data-jpa:${SPRING_BOOT_VERSION}"
    compile "org.springframework.boot:spring-boot-starter-security:${SPRING_BOOT_VERSION}"
    compile "org.thymeleaf.extras:thymeleaf-extras-springsecurity3:2.1.2.RELEASE"
    //compile 'mysql:mysql-connector-java:5.1.34'
    compile "com.h2database:h2"
    compile 'org.hibernate:hibernate-validator:5.1.3.Final'
    //compile 'org.apache.tomcat.embed:tomcat-embed-el:8.0.15'
    testCompile "org.springframework.boot:spring-boot:starter-test:${SPRING_BOOT_VERSION}"
}

jar {
    baseName = 'admin-console'
    version = '0.0.1-SNAPSHOT'
}

idea {
    module {
        inheritOutputDirs = false
        outputDir = file("${buildDir}/classes/main")

        excludeDirs += [
                file('bower_modules'),
                file('src/main/resources/static'),
                file('node_modules')
        ]
    }
    project {
        languageLevel = vJavaLang
        ipr {
            withXml { provider ->
                def mapping = provider.node.component.find { it.@name == 'VcsDirectoryMappings' }.mapping
                mapping.@vcs = 'Git'
                mapping.@directory = '$PROJECT_DIR$'
            }
        }
    }
}

// e.g. ./gradlew encodePassword -Pargs="test"
task encodePassword << {
    StandardPasswordEncoder encoder = new StandardPasswordEncoder()
    String username = 'test'
    if (project.hasProperty('args')) {
        username = project.args.split('\\s+')[0]
    }
    println "Encoded password for user ${username}:"
    println encoder.encode(username)
}

apply from: 'name-generator.gradle'

task npmInstall(type: Exec) {
    logging.captureStandardOutput LogLevel.INFO
    logging.captureStandardError LogLevel.LIFECYCLE
    inputs.files "package.json", "bower.json"
    outputs.dir "node_modules"
    if(Os.isFamily(Os.FAMILY_WINDOWS)) {
        commandLine 'cmd', '/c', 'npm', 'install'
    } else {
        commandLine 'npm', 'install'
    }
}

task npmBuild(dependsOn: npmInstall, type: Exec) {
    logging.captureStandardOutput LogLevel.INFO
    logging.captureStandardError LogLevel.INFO
    inputs.dir "src"
    inputs.file "gulpfile.coffee"
    outputs.dir "dist"
    if(Os.isFamily(Os.FAMILY_WINDOWS)) {
        commandLine 'cmd', '/c', 'npm', 'run', 'build'
    } else {
        commandLine 'npm', 'run', 'build'
    }
}

task stage(dependsOn: ['clean', 'build'])
defaultTasks 'clean', 'build'
