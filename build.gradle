import org.springframework.security.crypto.password.StandardPasswordEncoder

def vJavaLang = '1.7'

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:1.2.3.RELEASE"
        classpath "org.springframework:springloaded:1.2.1.RELEASE"
        classpath "org.springframework.boot:spring-boot-starter-security:1.2.3.RELEASE"
    }
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'spring-boot'

repositories {
    jcenter()
}

dependencies {
    compile 'org.projectlombok:lombok:1.16.2'
    compile "org.springframework.boot:spring-boot-starter-web"
    compile "org.springframework.boot:spring-boot-starter-thymeleaf"
    compile "org.springframework.boot:spring-boot-starter-data-jpa"
    compile "org.springframework.boot:spring-boot-starter-security"
    compile "org.thymeleaf.extras:thymeleaf-extras-springsecurity3:2.1.2.RELEASE"
    compile "org.thymeleaf.extras:thymeleaf-extras-conditionalcomments:2.1.1.RELEASE"
    compile "com.h2database:h2"
    testCompile "org.springframework.boot:spring-boot-starter-test"
    testCompile "org.springframework.security:spring-security-test:4.0.1.RELEASE"
}

jar {
    baseName = 'sbac'
    version = '0.0.1-SNAPSHOT'
}

idea {
    module {
        inheritOutputDirs = false
        outputDir = file("${buildDir}/classes/main")

        excludeDirs += [
                file('src/main/resources/static/css'),
                file('src/main/resources/static/js'),
                file('src/main/resources/static/lib'),
                file('bower_components'),
                file('node_modules')
        ]
    }
    project {
        languageLevel = vJavaLang
        ipr {
            withXml { provider ->
                def mapping = provider.node.component.find { it.@name == 'VcsDirectoryMappings' }.mapping
                mapping.@vcs = 'Git'
                mapping.@directory = '$PROJECT_DIR$'
            }
        }
    }
}

// e.g. ./gradlew encodePassword -Pargs="test"
task encodePassword << {
    StandardPasswordEncoder encoder = new StandardPasswordEncoder()
    String username = 'test'
    if (project.hasProperty('args')) {
        username = project.args.split('\\s+')[0]
    }
    println "Encoded password for user ${username}:"
    println encoder.encode(username)
}

apply from: 'name-generator.gradle'

defaultTasks 'clean', 'build'
