{"version":3,"file":"bootstrap/Gruntfile.js","names":[],"mappings":"","sources":["bootstrap/Gruntfile.js"],"sourcesContent":["/*!\n * Bootstrap's Gruntfile\n * http://getbootstrap.com\n * Copyright 2013-2015 Twitter, Inc.\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\n */\n\nmodule.exports = function (grunt) {\n  'use strict';\n\n  // Force use of Unix newlines\n  grunt.util.linefeed = '\\n';\n\n  RegExp.quote = function (string) {\n    return string.replace(/[-\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');\n  };\n\n  var fs = require('fs');\n  var path = require('path');\n  var npmShrinkwrap = require('npm-shrinkwrap');\n  var generateGlyphiconsData = require('./grunt/bs-glyphicons-data-generator.js');\n  var BsLessdocParser = require('./grunt/bs-lessdoc-parser.js');\n  var getLessVarsData = function () {\n    var filePath = path.join(__dirname, 'less/variables.less');\n    var fileContent = fs.readFileSync(filePath, { encoding: 'utf8' });\n    var parser = new BsLessdocParser(fileContent);\n    return { sections: parser.parseFile() };\n  };\n  var generateRawFiles = require('./grunt/bs-raw-files-generator.js');\n  var generateCommonJSModule = require('./grunt/bs-commonjs-generator.js');\n  var configBridge = grunt.file.readJSON('./grunt/configBridge.json', { encoding: 'utf8' });\n\n  Object.keys(configBridge.paths).forEach(function (key) {\n    configBridge.paths[key].forEach(function (val, i, arr) {\n      arr[i] = path.join('./docs/assets', val);\n    });\n  });\n\n  // Project configuration.\n  grunt.initConfig({\n\n    // Metadata.\n    pkg: grunt.file.readJSON('package.json'),\n    banner: '/*!\\n' +\n            ' * Bootstrap v<%= pkg.version %> (<%= pkg.homepage %>)\\n' +\n            ' * Copyright 2011-<%= grunt.template.today(\"yyyy\") %> <%= pkg.author %>\\n' +\n            ' * Licensed under <%= pkg.license.type %> (<%= pkg.license.url %>)\\n' +\n            ' */\\n',\n    jqueryCheck: configBridge.config.jqueryCheck.join('\\n'),\n    jqueryVersionCheck: configBridge.config.jqueryVersionCheck.join('\\n'),\n\n    // Task configuration.\n    clean: {\n      dist: 'dist',\n      docs: 'docs/dist'\n    },\n\n    jshint: {\n      options: {\n        jshintrc: 'js/.jshintrc'\n      },\n      grunt: {\n        options: {\n          jshintrc: 'grunt/.jshintrc'\n        },\n        src: ['Gruntfile.js', 'grunt/*.js']\n      },\n      core: {\n        src: 'js/*.js'\n      },\n      test: {\n        options: {\n          jshintrc: 'js/tests/unit/.jshintrc'\n        },\n        src: 'js/tests/unit/*.js'\n      },\n      assets: {\n        src: ['docs/assets/js/src/*.js', 'docs/assets/js/*.js', '!docs/assets/js/*.min.js']\n      }\n    },\n\n    jscs: {\n      options: {\n        config: 'js/.jscsrc'\n      },\n      grunt: {\n        src: '<%= jshint.grunt.src %>'\n      },\n      core: {\n        src: '<%= jshint.core.src %>'\n      },\n      test: {\n        src: '<%= jshint.test.src %>'\n      },\n      assets: {\n        options: {\n          requireCamelCaseOrUpperCaseIdentifiers: null\n        },\n        src: '<%= jshint.assets.src %>'\n      }\n    },\n\n    concat: {\n      options: {\n        banner: '<%= banner %>\\n<%= jqueryCheck %>\\n<%= jqueryVersionCheck %>',\n        stripBanners: false\n      },\n      bootstrap: {\n        src: [\n          'js/transition.js',\n          'js/alert.js',\n          'js/button.js',\n          'js/carousel.js',\n          'js/collapse.js',\n          'js/dropdown.js',\n          'js/modal.js',\n          'js/tooltip.js',\n          'js/popover.js',\n          'js/scrollspy.js',\n          'js/tab.js',\n          'js/affix.js'\n        ],\n        dest: 'dist/js/<%= pkg.name %>.js'\n      }\n    },\n\n    uglify: {\n      options: {\n        preserveComments: 'some'\n      },\n      core: {\n        src: '<%= concat.bootstrap.dest %>',\n        dest: 'dist/js/<%= pkg.name %>.min.js'\n      },\n      customize: {\n        src: configBridge.paths.customizerJs,\n        dest: 'docs/assets/js/customize.min.js'\n      },\n      docsJs: {\n        src: configBridge.paths.docsJs,\n        dest: 'docs/assets/js/docs.min.js'\n      }\n    },\n\n    qunit: {\n      options: {\n        inject: 'js/tests/unit/phantom.js'\n      },\n      files: 'js/tests/index.html'\n    },\n\n    less: {\n      compileCore: {\n        options: {\n          strictMath: true,\n          sourceMap: true,\n          outputSourceFiles: true,\n          sourceMapURL: '<%= pkg.name %>.css.map',\n          sourceMapFilename: 'dist/css/<%= pkg.name %>.css.map'\n        },\n        src: 'less/bootstrap.less',\n        dest: 'dist/css/<%= pkg.name %>.css'\n      },\n      compileTheme: {\n        options: {\n          strictMath: true,\n          sourceMap: true,\n          outputSourceFiles: true,\n          sourceMapURL: '<%= pkg.name %>-theme.css.map',\n          sourceMapFilename: 'dist/css/<%= pkg.name %>-theme.css.map'\n        },\n        src: 'less/theme.less',\n        dest: 'dist/css/<%= pkg.name %>-theme.css'\n      }\n    },\n\n    autoprefixer: {\n      options: {\n        browsers: configBridge.config.autoprefixerBrowsers\n      },\n      core: {\n        options: {\n          map: true\n        },\n        src: 'dist/css/<%= pkg.name %>.css'\n      },\n      theme: {\n        options: {\n          map: true\n        },\n        src: 'dist/css/<%= pkg.name %>-theme.css'\n      },\n      docs: {\n        src: ['docs/assets/css/anchor.css', 'docs/assets/css/src/docs.css']\n      },\n      examples: {\n        expand: true,\n        cwd: 'docs/examples/',\n        src: ['**/*.css'],\n        dest: 'docs/examples/'\n      }\n    },\n\n    csslint: {\n      options: {\n        csslintrc: 'less/.csslintrc'\n      },\n      dist: [\n        'dist/css/bootstrap.css',\n        'dist/css/bootstrap-theme.css'\n      ],\n      examples: [\n        'docs/examples/**/*.css'\n      ],\n      docs: {\n        options: {\n          ids: false,\n          'overqualified-elements': false\n        },\n        src: 'docs/assets/css/src/docs.css'\n      }\n    },\n\n    cssmin: {\n      options: {\n        // TODO: disable `zeroUnits` optimization once clean-css 3.2 is released\n        //    and then simplify the fix for https://github.com/twbs/bootstrap/issues/14837 accordingly\n        compatibility: 'ie8',\n        keepSpecialComments: '*',\n        advanced: false\n      },\n      minifyCore: {\n        src: 'dist/css/<%= pkg.name %>.css',\n        dest: 'dist/css/<%= pkg.name %>.min.css'\n      },\n      minifyTheme: {\n        src: 'dist/css/<%= pkg.name %>-theme.css',\n        dest: 'dist/css/<%= pkg.name %>-theme.min.css'\n      },\n      docs: {\n        src: [\n          'docs/assets/css/src/pygments-manni.css',\n          'docs/assets/css/src/anchor.css',\n          'docs/assets/css/src/docs.css'\n\n        ],\n        dest: 'docs/assets/css/docs.min.css'\n      }\n    },\n\n    usebanner: {\n      options: {\n        position: 'top',\n        banner: '<%= banner %>'\n      },\n      files: {\n        src: 'dist/css/*.css'\n      }\n    },\n\n    csscomb: {\n      options: {\n        config: 'less/.csscomb.json'\n      },\n      dist: {\n        expand: true,\n        cwd: 'dist/css/',\n        src: ['*.css', '!*.min.css'],\n        dest: 'dist/css/'\n      },\n      examples: {\n        expand: true,\n        cwd: 'docs/examples/',\n        src: '**/*.css',\n        dest: 'docs/examples/'\n      },\n      docs: {\n        src: 'docs/assets/css/src/docs.css',\n        dest: 'docs/assets/css/src/docs.css'\n      }\n    },\n\n    copy: {\n      fonts: {\n        expand: true,\n        src: 'fonts/*',\n        dest: 'dist/'\n      },\n      docs: {\n        expand: true,\n        cwd: 'dist/',\n        src: [\n          '**/*'\n        ],\n        dest: 'docs/dist/'\n      }\n    },\n\n    connect: {\n      server: {\n        options: {\n          port: 3000,\n          base: '.'\n        }\n      }\n    },\n\n    jekyll: {\n      options: {\n        config: '_config.yml'\n      },\n      docs: {},\n      github: {\n        options: {\n          raw: 'github: true'\n        }\n      }\n    },\n\n    jade: {\n      options: {\n        pretty: true,\n        data: getLessVarsData\n      },\n      customizerVars: {\n        src: 'docs/_jade/customizer-variables.jade',\n        dest: 'docs/_includes/customizer-variables.html'\n      },\n      customizerNav: {\n        src: 'docs/_jade/customizer-nav.jade',\n        dest: 'docs/_includes/nav/customize.html'\n      }\n    },\n\n    htmllint: {\n      options: {\n        ignore: [\n          'Attribute \"autocomplete\" not allowed on element \"button\" at this point.',\n          'Attribute \"autocomplete\" not allowed on element \"input\" at this point.',\n          'Element \"img\" is missing required attribute \"src\".'\n        ]\n      },\n      src: '_gh_pages/**/*.html'\n    },\n\n    watch: {\n      src: {\n        files: '<%= jshint.core.src %>',\n        tasks: ['jshint:src', 'qunit', 'concat']\n      },\n      test: {\n        files: '<%= jshint.test.src %>',\n        tasks: ['jshint:test', 'qunit']\n      },\n      less: {\n        files: 'less/**/*.less',\n        tasks: 'less'\n      }\n    },\n\n    sed: {\n      versionNumber: {\n        pattern: (function () {\n          var old = grunt.option('oldver');\n          return old ? RegExp.quote(old) : old;\n        })(),\n        replacement: grunt.option('newver'),\n        recursive: true\n      }\n    },\n\n    'saucelabs-qunit': {\n      all: {\n        options: {\n          build: process.env.TRAVIS_JOB_ID,\n          throttled: 10,\n          maxRetries: 3,\n          maxPollRetries: 4,\n          urls: ['http://127.0.0.1:3000/js/tests/index.html?hidepassed'],\n          browsers: grunt.file.readYAML('grunt/sauce_browsers.yml')\n        }\n      }\n    },\n\n    exec: {\n      npmUpdate: {\n        command: 'npm update'\n      }\n    },\n\n    compress: {\n      main: {\n        options: {\n          archive: 'bootstrap-<%= pkg.version %>-dist.zip',\n          mode: 'zip',\n          level: 9,\n          pretty: true\n        },\n        files: [\n          {\n            expand: true,\n            cwd: 'dist/',\n            src: ['**'],\n            dest: 'bootstrap-<%= pkg.version %>-dist'\n          }\n        ]\n      }\n    }\n\n  });\n\n\n  // These plugins provide necessary tasks.\n  require('load-grunt-tasks')(grunt, { scope: 'devDependencies' });\n  require('time-grunt')(grunt);\n\n  // Docs HTML validation task\n  grunt.registerTask('validate-html', ['jekyll:docs', 'htmllint']);\n\n  var runSubset = function (subset) {\n    return !process.env.TWBS_TEST || process.env.TWBS_TEST === subset;\n  };\n  var isUndefOrNonZero = function (val) {\n    return val === undefined || val !== '0';\n  };\n\n  // Test task.\n  var testSubtasks = [];\n  // Skip core tests if running a different subset of the test suite\n  if (runSubset('core') &&\n      // Skip core tests if this is a Savage build\n      process.env.TRAVIS_REPO_SLUG !== 'twbs-savage/bootstrap') {\n    testSubtasks = testSubtasks.concat(['dist-css', 'dist-js', 'csslint:dist', 'test-js', 'docs']);\n  }\n  // Skip HTML validation if running a different subset of the test suite\n  if (runSubset('validate-html') &&\n      // Skip HTML5 validator on Travis when [skip validator] is in the commit message\n      isUndefOrNonZero(process.env.TWBS_DO_VALIDATOR)) {\n    testSubtasks.push('validate-html');\n  }\n  // Only run Sauce Labs tests if there's a Sauce access key\n  if (typeof process.env.SAUCE_ACCESS_KEY !== 'undefined' &&\n      // Skip Sauce if running a different subset of the test suite\n      runSubset('sauce-js-unit') &&\n      // Skip Sauce on Travis when [skip sauce] is in the commit message\n      isUndefOrNonZero(process.env.TWBS_DO_SAUCE)) {\n    testSubtasks.push('connect');\n    testSubtasks.push('saucelabs-qunit');\n  }\n  grunt.registerTask('test', testSubtasks);\n  grunt.registerTask('test-js', ['jshint:core', 'jshint:test', 'jshint:grunt', 'jscs:core', 'jscs:test', 'jscs:grunt', 'qunit']);\n\n  // JS distribution task.\n  grunt.registerTask('dist-js', ['concat', 'uglify:core', 'commonjs']);\n\n  // CSS distribution task.\n  grunt.registerTask('less-compile', ['less:compileCore', 'less:compileTheme']);\n  grunt.registerTask('dist-css', ['less-compile', 'autoprefixer:core', 'autoprefixer:theme', 'usebanner', 'csscomb:dist', 'cssmin:minifyCore', 'cssmin:minifyTheme']);\n\n  // Full distribution task.\n  grunt.registerTask('dist', ['clean:dist', 'dist-css', 'copy:fonts', 'dist-js']);\n\n  // Default task.\n  grunt.registerTask('default', ['clean:dist', 'copy:fonts', 'test']);\n\n  // Version numbering task.\n  // grunt change-version-number --oldver=A.B.C --newver=X.Y.Z\n  // This can be overzealous, so its changes should always be manually reviewed!\n  grunt.registerTask('change-version-number', 'sed');\n\n  grunt.registerTask('build-glyphicons-data', function () { generateGlyphiconsData.call(this, grunt); });\n\n  // task for building customizer\n  grunt.registerTask('build-customizer', ['build-customizer-html', 'build-raw-files']);\n  grunt.registerTask('build-customizer-html', 'jade');\n  grunt.registerTask('build-raw-files', 'Add scripts/less files to customizer.', function () {\n    var banner = grunt.template.process('<%= banner %>');\n    generateRawFiles(grunt, banner);\n  });\n\n  grunt.registerTask('commonjs', 'Generate CommonJS entrypoint module in dist dir.', function () {\n    var srcFiles = grunt.config.get('concat.bootstrap.src');\n    var destFilepath = 'dist/js/npm.js';\n    generateCommonJSModule(grunt, srcFiles, destFilepath);\n  });\n\n  // Docs task.\n  grunt.registerTask('docs-css', ['autoprefixer:docs', 'autoprefixer:examples', 'csscomb:docs', 'csscomb:examples', 'cssmin:docs']);\n  grunt.registerTask('lint-docs-css', ['csslint:docs', 'csslint:examples']);\n  grunt.registerTask('docs-js', ['uglify:docsJs', 'uglify:customize']);\n  grunt.registerTask('lint-docs-js', ['jshint:assets', 'jscs:assets']);\n  grunt.registerTask('docs', ['docs-css', 'lint-docs-css', 'docs-js', 'lint-docs-js', 'clean:docs', 'copy:docs', 'build-glyphicons-data', 'build-customizer']);\n\n  grunt.registerTask('prep-release', ['jekyll:github', 'compress']);\n\n  // Task for updating the cached npm packages used by the Travis build (which are controlled by test-infra/npm-shrinkwrap.json).\n  // This task should be run and the updated file should be committed whenever Bootstrap's dependencies change.\n  grunt.registerTask('update-shrinkwrap', ['exec:npmUpdate', '_update-shrinkwrap']);\n  grunt.registerTask('_update-shrinkwrap', function () {\n    var done = this.async();\n    npmShrinkwrap({ dev: true, dirname: __dirname }, function (err) {\n      if (err) {\n        grunt.fail.warn(err);\n      }\n      var dest = 'test-infra/npm-shrinkwrap.json';\n      fs.renameSync('npm-shrinkwrap.json', dest);\n      grunt.log.writeln('File ' + dest.cyan + ' updated.');\n      done();\n    });\n  });\n};\n"],"sourceRoot":"/source/"}