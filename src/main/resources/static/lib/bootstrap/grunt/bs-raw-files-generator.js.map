{"version":3,"file":"bootstrap/grunt/bs-raw-files-generator.js","names":[],"mappings":"","sources":["bootstrap/grunt/bs-raw-files-generator.js"],"sourcesContent":["/*!\n * Bootstrap Grunt task for generating raw-files.min.js for the Customizer\n * http://getbootstrap.com\n * Copyright 2014 Twitter, Inc.\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\n */\n\n/* global btoa: true */\n\n'use strict';\nvar fs = require('fs');\nvar btoa = require('btoa');\nvar glob = require('glob');\n\nfunction getFiles(type) {\n  var files = {};\n  var recursive = (type === 'less');\n  var globExpr = (recursive ? '/**/*' : '/*');\n  glob.sync(type + globExpr)\n    .filter(function (path) {\n      return type === 'fonts' ? true : new RegExp('\\\\.' + type + '$').test(path);\n    })\n    .forEach(function (fullPath) {\n      var relativePath = fullPath.replace(/^[^/]+\\//, '');\n      files[relativePath] = (type === 'fonts' ? btoa(fs.readFileSync(fullPath)) : fs.readFileSync(fullPath, 'utf8'));\n    });\n  return 'var __' + type + ' = ' + JSON.stringify(files) + '\\n';\n}\n\nmodule.exports = function generateRawFilesJs(grunt, banner) {\n  if (!banner) {\n    banner = '';\n  }\n  var dirs = ['js', 'less', 'fonts'];\n  var files = banner + dirs.map(getFiles).reduce(function (combined, file) {\n    return combined + file;\n  }, '');\n  var rawFilesJs = 'docs/assets/js/raw-files.min.js';\n  try {\n    fs.writeFileSync(rawFilesJs, files);\n  }\n  catch (err) {\n    grunt.fail.warn(err);\n  }\n  grunt.log.writeln('File ' + rawFilesJs.cyan + ' created.');\n};\n"],"sourceRoot":"/source/"}