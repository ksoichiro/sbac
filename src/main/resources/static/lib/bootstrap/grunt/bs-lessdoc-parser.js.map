{"version":3,"file":"bootstrap/grunt/bs-lessdoc-parser.js","names":[],"mappings":"","sources":["bootstrap/grunt/bs-lessdoc-parser.js"],"sourcesContent":["/*!\n * Bootstrap Grunt task for parsing Less docstrings\n * http://getbootstrap.com\n * Copyright 2014 Twitter, Inc.\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\n */\n'use strict';\n\nvar Markdown = require('markdown-it');\n\nfunction markdown2html(markdownString) {\n  var md = new Markdown();\n\n  // the slice removes the <p>...</p> wrapper output by Markdown processor\n  return md.render(markdownString.trim()).slice(3, -5);\n}\n\n\n/*\nMini-language:\n  //== This is a normal heading, which starts a section. Sections group variables together.\n  //## Optional description for the heading\n\n  //=== This is a subheading.\n\n  //** Optional description for the following variable. You **can** use Markdown in descriptions to discuss `<html>` stuff.\n  @foo: #fff;\n\n  //-- This is a heading for a section whose variables shouldn't be customizable\n\n  All other lines are ignored completely.\n*/\n\n\nvar CUSTOMIZABLE_HEADING = /^[/]{2}={2}(.*)$/;\nvar UNCUSTOMIZABLE_HEADING = /^[/]{2}-{2}(.*)$/;\nvar SUBSECTION_HEADING = /^[/]{2}={3}(.*)$/;\nvar SECTION_DOCSTRING = /^[/]{2}#{2}(.+)$/;\nvar VAR_ASSIGNMENT = /^(@[a-zA-Z0-9_-]+):[ ]*([^ ;][^;]*);[ ]*$/;\nvar VAR_DOCSTRING = /^[/]{2}[*]{2}(.+)$/;\n\nfunction Section(heading, customizable) {\n  this.heading = heading.trim();\n  this.id = this.heading.replace(/\\s+/g, '-').toLowerCase();\n  this.customizable = customizable;\n  this.docstring = null;\n  this.subsections = [];\n}\n\nSection.prototype.addSubSection = function (subsection) {\n  this.subsections.push(subsection);\n};\n\nfunction SubSection(heading) {\n  this.heading = heading.trim();\n  this.id = this.heading.replace(/\\s+/g, '-').toLowerCase();\n  this.variables = [];\n}\n\nSubSection.prototype.addVar = function (variable) {\n  this.variables.push(variable);\n};\n\nfunction VarDocstring(markdownString) {\n  this.html = markdown2html(markdownString);\n}\n\nfunction SectionDocstring(markdownString) {\n  this.html = markdown2html(markdownString);\n}\n\nfunction Variable(name, defaultValue) {\n  this.name = name;\n  this.defaultValue = defaultValue;\n  this.docstring = null;\n}\n\nfunction Tokenizer(fileContent) {\n  this._lines = fileContent.split('\\n');\n  this._next = undefined;\n}\n\nTokenizer.prototype.unshift = function (token) {\n  if (this._next !== undefined) {\n    throw new Error('Attempted to unshift twice!');\n  }\n  this._next = token;\n};\n\nTokenizer.prototype._shift = function () {\n  // returning null signals EOF\n  // returning undefined means the line was ignored\n  if (this._next !== undefined) {\n    var result = this._next;\n    this._next = undefined;\n    return result;\n  }\n  if (this._lines.length <= 0) {\n    return null;\n  }\n  var line = this._lines.shift();\n  var match = null;\n  match = SUBSECTION_HEADING.exec(line);\n  if (match !== null) {\n    return new SubSection(match[1]);\n  }\n  match = CUSTOMIZABLE_HEADING.exec(line);\n  if (match !== null) {\n    return new Section(match[1], true);\n  }\n  match = UNCUSTOMIZABLE_HEADING.exec(line);\n  if (match !== null) {\n    return new Section(match[1], false);\n  }\n  match = SECTION_DOCSTRING.exec(line);\n  if (match !== null) {\n    return new SectionDocstring(match[1]);\n  }\n  match = VAR_DOCSTRING.exec(line);\n  if (match !== null) {\n    return new VarDocstring(match[1]);\n  }\n  var commentStart = line.lastIndexOf('//');\n  var varLine = (commentStart === -1) ? line : line.slice(0, commentStart);\n  match = VAR_ASSIGNMENT.exec(varLine);\n  if (match !== null) {\n    return new Variable(match[1], match[2]);\n  }\n  return undefined;\n};\n\nTokenizer.prototype.shift = function () {\n  while (true) {\n    var result = this._shift();\n    if (result === undefined) {\n      continue;\n    }\n    return result;\n  }\n};\n\nfunction Parser(fileContent) {\n  this._tokenizer = new Tokenizer(fileContent);\n}\n\nParser.prototype.parseFile = function () {\n  var sections = [];\n  while (true) {\n    var section = this.parseSection();\n    if (section === null) {\n      if (this._tokenizer.shift() !== null) {\n        throw new Error('Unexpected unparsed section of file remains!');\n      }\n      return sections;\n    }\n    sections.push(section);\n  }\n};\n\nParser.prototype.parseSection = function () {\n  var section = this._tokenizer.shift();\n  if (section === null) {\n    return null;\n  }\n  if (!(section instanceof Section)) {\n    throw new Error('Expected section heading; got: ' + JSON.stringify(section));\n  }\n  var docstring = this._tokenizer.shift();\n  if (docstring instanceof SectionDocstring) {\n    section.docstring = docstring;\n  }\n  else {\n    this._tokenizer.unshift(docstring);\n  }\n  this.parseSubSections(section);\n\n  return section;\n};\n\nParser.prototype.parseSubSections = function (section) {\n  while (true) {\n    var subsection = this.parseSubSection();\n    if (subsection === null) {\n      if (section.subsections.length === 0) {\n        // Presume an implicit initial subsection\n        subsection = new SubSection('');\n        this.parseVars(subsection);\n      }\n      else {\n        break;\n      }\n    }\n    section.addSubSection(subsection);\n  }\n\n  if (section.subsections.length === 1 && !(section.subsections[0].heading) && section.subsections[0].variables.length === 0) {\n    // Ignore lone empty implicit subsection\n    section.subsections = [];\n  }\n};\n\nParser.prototype.parseSubSection = function () {\n  var subsection = this._tokenizer.shift();\n  if (subsection instanceof SubSection) {\n    this.parseVars(subsection);\n    return subsection;\n  }\n  this._tokenizer.unshift(subsection);\n  return null;\n};\n\nParser.prototype.parseVars = function (subsection) {\n  while (true) {\n    var variable = this.parseVar();\n    if (variable === null) {\n      return;\n    }\n    subsection.addVar(variable);\n  }\n};\n\nParser.prototype.parseVar = function () {\n  var docstring = this._tokenizer.shift();\n  if (!(docstring instanceof VarDocstring)) {\n    this._tokenizer.unshift(docstring);\n    docstring = null;\n  }\n  var variable = this._tokenizer.shift();\n  if (variable instanceof Variable) {\n    variable.docstring = docstring;\n    return variable;\n  }\n  this._tokenizer.unshift(variable);\n  return null;\n};\n\n\nmodule.exports = Parser;\n"],"sourceRoot":"/source/"}